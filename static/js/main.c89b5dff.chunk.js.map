{"version":3,"sources":["sketches/insertion.js","sketches/quicksort.js","sketches/bubble.js","sketches/mergesort.js","components/VisualCanvas.js","App.js","serviceWorker.js","index.js"],"names":["InsertionSketch","p","heights","bar_width","setup","createCanvas","windowWidth","windowHeight","i","push","random","console","log","insertionSort","draw","background","fill","length","rect","windowResized","resizeCanvas","arr","a","j","current","sleep","ms","Promise","resolve","setTimeout","QuickSortSketch","quickSort","low","high","partition","pivot","insertion_index","swap","temp","BubbleSortSketch","bubbleSort","MergeSortSketch","mergeSort","start","end","mid","Math","floor","merge","k","l","InsertionCanvas","props","myRef","React","createRef","this","myP5","p5","ref","Component","QuickCanvas","BubbleCanvas","MergeCanvas","algos","App","state","algorithm","canvas","className","map","algo","onClick","e","setState","style","backgroundColor","color","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c89b5dff.chunk.js","sourcesContent":["const InsertionSketch = (p) => {\n    let heights = [];\n    let bar_width = 0;\n\n    p.setup = () => {\n        p.createCanvas(p.windowWidth * 0.75, p.windowHeight * 0.75);\n        bar_width = (p.windowWidth * 0.75) / 50;\n\n        for (let i = 0; i < 50; i++) {\n            heights.push(p.random(p.windowHeight * 0.75));\n        }\n\n        console.log(heights);\n        p.insertionSort(heights);\n    };\n\n    p.draw = () => {\n        p.background(\"#2c3e50\");\n\n        p.fill(\"#3498db\");\n        for (let i = 0; i < heights.length; i++) {\n            p.rect(\n                i * bar_width,\n                p.windowHeight * 0.75 - heights[i],\n                bar_width,\n                heights[i]\n            );\n        }\n    };\n\n    p.windowResized = () => {\n        p.resizeCanvas(p.windowWidth * 0.75, p.windowHeight * 0.75);\n        bar_width = (p.windowWidth * 0.75) / 50;\n    };\n\n    p.insertionSort = async (arr) => {\n        for (let i = 1; i < arr.length; i++) {\n            let j = i - 1;\n            let current = arr[i];\n\n            while (j >= 0 && arr[j] > current) {\n                await p.sleep(50);\n                arr[j + 1] = arr[j];\n                j--;\n            }\n\n            await p.sleep(50);\n            arr[j + 1] = current;\n        }\n    };\n\n    p.sleep = (ms) => {\n        return new Promise((resolve) => setTimeout(resolve, ms));\n    };\n};\n\nexport default InsertionSketch;\n","const QuickSortSketch = (p) => {\n    let heights = [];\n    let bar_width = 0;\n\n    p.setup = () => {\n        p.createCanvas(p.windowWidth * 0.75, p.windowHeight * 0.75);\n        bar_width = (p.windowWidth * 0.75) / 50;\n\n        for (let i = 0; i < 50; i++) {\n            heights.push(p.random(p.windowHeight * 0.75));\n        }\n\n        console.log(heights);\n        p.quickSort(heights, 0, heights.length - 1);\n    };\n\n    p.draw = () => {\n        p.background(\"#2c3e50\");\n\n        p.fill(\"#3498db\");\n        for (let i = 0; i < heights.length; i++) {\n            p.rect(\n                i * bar_width,\n                p.windowHeight * 0.75 - heights[i],\n                bar_width,\n                heights[i]\n            );\n        }\n    };\n\n    p.windowResized = () => {\n        p.resizeCanvas(p.windowWidth * 0.75, p.windowHeight * 0.75);\n        bar_width = (p.windowWidth * 0.75) / 50;\n    };\n\n    //quck sort algorithm\n    p.quickSort = async (arr, low, high) => {\n        if (low <= high) {\n            let pivot = await p.partition(arr, low, high);\n            // Promise.all([\n            //     p.quickSort(arr, low, pivot - 1),\n            //     p.quickSort(arr, pivot + 1, high),\n            // ]);\n\n            await p.quickSort(arr, low, pivot - 1);\n            await p.quickSort(arr, pivot + 1, high);\n        }\n    };\n\n    p.partition = async (arr, low, high) => {\n        let insertion_index = low;\n\n        for (let i = low; i <= high - 1; i++) {\n            if (arr[i] < arr[high]) {\n                await p.swap(arr, insertion_index, i);\n                insertion_index++;\n            }\n        }\n\n        await p.swap(arr, insertion_index, high);\n\n        return insertion_index;\n    };\n\n    p.swap = async (arr, i, j) => {\n        await p.sleep(75);\n        let temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n    };\n\n    p.sleep = (ms) => {\n        return new Promise((resolve) => setTimeout(resolve, ms));\n    };\n};\n\nexport default QuickSortSketch;\n","const BubbleSortSketch = (p) => {\n    let heights = [];\n    let bar_width = 0;\n\n    p.setup = () => {\n        p.createCanvas(p.windowWidth * 0.75, p.windowHeight * 0.75);\n        bar_width = (p.windowWidth * 0.75) / 50;\n\n        for (let i = 0; i < 50; i++) {\n            heights.push(p.random(p.windowHeight * 0.75));\n        }\n\n        console.log(heights);\n        p.bubbleSort(heights);\n    };\n\n    p.draw = () => {\n        p.background(\"#2c3e50\");\n\n        p.fill(\"#3498db\");\n        for (let i = 0; i < heights.length; i++) {\n            p.rect(\n                i * bar_width,\n                p.windowHeight * 0.75 - heights[i],\n                bar_width,\n                heights[i]\n            );\n        }\n    };\n\n    p.windowResized = () => {\n        p.resizeCanvas(p.windowWidth * 0.75, p.windowHeight * 0.75);\n        bar_width = (p.windowWidth * 0.75) / 50;\n    };\n\n    p.bubbleSort = async (arr) => {\n        // for (let i = 1; i < arr.length; i++) {\n        //     let j = i - 1;\n        //     let current = arr[i];\n\n        //     while (j >= 0 && arr[j] > current) {\n        //         await p.sleep(40);\n        //         arr[j + 1] = arr[j];\n        //         j--;\n        //     }\n\n        //     await p.sleep(40);\n        //     arr[j + 1] = current;\n        // }\n\n        for (let i = 0; i < arr.length - 1; i++) {\n            for (let j = 0; j < arr.length - i - 1; j++) {\n                if (arr[j] > arr[j + 1]) {\n                    await p.swap(arr, j, j + 1);\n                }\n            }\n        }\n    };\n\n    p.swap = async (arr, i, j) => {\n        await p.sleep(50);\n        let temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n    };\n\n    p.sleep = (ms) => {\n        return new Promise((resolve) => setTimeout(resolve, ms));\n    };\n};\n\nexport default BubbleSortSketch;\n","const MergeSortSketch = (p) => {\n    let heights = [];\n    let bar_width = 0;\n\n    p.setup = () => {\n        p.createCanvas(p.windowWidth * 0.75, p.windowHeight * 0.75);\n        bar_width = (p.windowWidth * 0.75) / 50;\n\n        for (let i = 0; i < 50; i++) {\n            heights.push(p.random(p.windowHeight * 0.75));\n        }\n\n        console.log(heights);\n        p.mergeSort(heights, 0, heights.length - 1);\n    };\n\n    p.draw = () => {\n        p.background(\"#2c3e50\");\n\n        p.fill(\"#3498db\");\n        for (let i = 0; i < heights.length; i++) {\n            p.rect(\n                i * bar_width,\n                p.windowHeight * 0.75 - heights[i],\n                bar_width,\n                heights[i]\n            );\n        }\n    };\n\n    p.windowResized = () => {\n        p.resizeCanvas(p.windowWidth * 0.75, p.windowHeight * 0.75);\n        bar_width = (p.windowWidth * 0.75) / 50;\n    };\n\n    //merge sort algorithm\n    p.mergeSort = async (arr, start, end) => {\n        if (start >= end) return;\n        let mid = Math.floor((start + end) / 2);\n        // Promise.all([\n        //     p.mergeSort(arr, start, mid),\n        //     p.mergeSort(arr, mid + 1, end),\n        // ]);\n        await p.mergeSort(arr, start, mid);\n        await p.mergeSort(arr, mid + 1, end);\n        await p.merge(arr, start, mid, end);\n    };\n\n    // function to merge\n    p.merge = async (arr, start, mid, end) => {\n        let temp = [];\n\n        let k = start,\n            l = mid + 1;\n\n        while (k <= mid && l <= end) {\n            if (arr[k] < arr[l]) {\n                temp.push(arr[k]);\n                k++;\n            } else {\n                temp.push(arr[l]);\n                l++;\n            }\n        }\n\n        while (k <= mid) {\n            temp.push(arr[k]);\n            k++;\n        }\n\n        while (l <= end) {\n            temp.push(arr[l]);\n            l++;\n        }\n\n        for (let i = 0, k = start; i < temp.length, k <= end; i++, k++) {\n            arr[k] = temp[i];\n            await p.sleep(75);\n        }\n    };\n\n    p.swap = async (arr, i, j) => {\n        await p.sleep(75);\n        let temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n    };\n\n    p.sleep = (ms) => {\n        return new Promise((resolve) => setTimeout(resolve, ms));\n    };\n};\n\nexport default MergeSortSketch;\n","import React from \"react\";\nimport p5 from \"p5\";\nimport InsertionSketch from \"../sketches/insertion\";\nimport QuickSortSketch from \"../sketches/quicksort\";\nimport BubbleSortSketch from \"../sketches/bubble\";\nimport MergeSortSketch from \"../sketches/mergesort\";\n\nexport class InsertionCanvas extends React.Component {\n    constructor(props) {\n        super(props);\n        this.myRef = React.createRef();\n    }\n\n    componentDidMount() {\n        this.myP5 = new p5(InsertionSketch, this.myRef.current);\n    }\n\n    render() {\n        return <div ref={this.myRef}></div>;\n    }\n}\n\nexport class QuickCanvas extends React.Component {\n    constructor(props) {\n        super(props);\n        this.myRef = React.createRef();\n    }\n\n    componentDidMount() {\n        this.myP5 = new p5(QuickSortSketch, this.myRef.current);\n    }\n\n    render() {\n        return <div ref={this.myRef}></div>;\n    }\n}\n\nexport class BubbleCanvas extends React.Component {\n    constructor(props) {\n        super(props);\n        this.myRef = React.createRef();\n    }\n\n    componentDidMount() {\n        this.myP5 = new p5(BubbleSortSketch, this.myRef.current);\n    }\n\n    render() {\n        return <div ref={this.myRef}></div>;\n    }\n}\n\nexport class MergeCanvas extends React.Component {\n    constructor(props) {\n        super(props);\n        this.myRef = React.createRef();\n    }\n\n    componentDidMount() {\n        this.myP5 = new p5(MergeSortSketch, this.myRef.current);\n    }\n\n    render() {\n        return <div ref={this.myRef}></div>;\n    }\n}\n","import React from \"react\";\nimport {\n    InsertionCanvas,\n    QuickCanvas,\n    BubbleCanvas,\n    MergeCanvas,\n} from \"./components/VisualCanvas\";\nimport \"./App.css\";\nimport data from \"./data/algo_info\";\n\nconst algos = [\"Insertion Sort\", \"Quick Sort\", \"Bubble Sort\", \"Merge Sort\"];\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.myRef = React.createRef();\n        this.state = {\n            algorithm: 0,\n        };\n    }\n\n    render() {\n        let canvas = null;\n        switch (this.state.algorithm) {\n            case 0:\n                canvas = <InsertionCanvas />;\n                break;\n            case 1:\n                canvas = <QuickCanvas />;\n                break;\n            case 2:\n                canvas = <BubbleCanvas />;\n                break;\n            case 3:\n                canvas = <MergeCanvas />;\n                break;\n        }\n\n        return (\n            <div className=\"App\">\n                <div className=\"container-row\">\n                    <h3 className=\"heading\">Sorting algorithm visualizer</h3>\n                </div>\n                <div className=\"container-row\">\n                    <div className=\"container-col\">\n                        <p className=\"current\">\n                            Current algorithm: {algos[this.state.algorithm]}\n                        </p>\n                        {algos.map((algo, i) => {\n                            return (\n                                <button\n                                    className=\"btn\"\n                                    onClick={(e) =>\n                                        this.setState({ algorithm: i })\n                                    }\n                                    style={\n                                        this.state.algorithm === i\n                                            ? {\n                                                  backgroundColor: \"#2c3e50\",\n                                                  color: \"#fff\",\n                                              }\n                                            : {}\n                                    }\n                                >\n                                    {algo}\n                                </button>\n                            );\n                        })}\n                    </div>\n                    <div className=\"canvas\">{canvas}</div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}